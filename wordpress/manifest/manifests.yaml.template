apiVersion: marketplace.cloud.google.com/v1
kind: Application
metadata:
  annotations:
    marketplace.cloud.google.com: |
      {"name":"Wordpress","version":"v0.1","description":"The most popular blogging platform","url":"wordpress.org","tagline":"wordpress blog","support_info":"Community support","documentations":[{"url":"https://codex.wordpress.org/Getting_Started_with_WordPress","title":"Getting Started","description":"A quick walkthrough"}]}
  ApplicationStatus:
    ready: true
  generation: 0
  initializers: null
  name: "$APPLICATION_NAME"
  namespace: "$NAMESPACE"
spec:
  # TODO(huyhuynh): This list "replaces" the original list created
  # by the up script. As a result, the deployer service account, for example,
  # is no longer owned by this application. We have to hackily list such
  # non-application resources here.
  # To correctly fix this, we need to use a proper merge stategy. The idea is
  # that kubectl wouldn't touch the components that it doesn't manage.
  #
  # TODO(huyhuynh): Need a good way to do this. Listing the components
  # manually like this is error-prone and especially hard when there are
  # many manifest files or when they are modified.
  components:
  - $APPLICATION_NAME-controller:
      kind: Deployment
  - $APPLICATION_NAME-controller-sa:
      kind: ServiceAccount
  - $APPLICATION_NAME-controller-role:
      kind: Role
  - $APPLICATION_NAME-controller-apprb:
      kind: RoleBinding
  - $APPLICATION_NAME-controller-editrb:
      kind: RoleBinding
  - $APPLICATION_NAME-mysql:
      kind: Deployment
  - $APPLICATION_NAME-mysql-pvc:
      kind: PersistentVolumeClaim
  - $APPLICATION_NAME-mysql-svc:
      kind: Service
  - $APPLICATION_NAME-wordpress:
      kind: Deployment
  - $APPLICATION_NAME-wordpress-pvc:
      kind: PersistentVolumeClaim
  - $APPLICATION_NAME-wordpress-svc:
      kind: Service
  # The following shouldn't be listed here. They are not part of the
  # application itself, and the solution crafter shouldn't have to worry
  # about them. See TODOs above.
  - $APPLICATION_NAME-deployer:
      kind: Job
  - $APPLICATION_NAME-deployer-sa:
      kind: ServiceAccount
  - $APPLICATION_NAME-deployer-role:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
  - $APPLICATION_NAME-deployer-rb:
      apiGroup: rbac.authorization.k8s.io
      kind: RoleBinding
---
# TODO(huyhuynh): Change this to using StatefulSet
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: $APPLICATION_NAME-mysql
  labels: &MysqlDeploymentLabels
    app: $APPLICATION_NAME
    component: wordpress-mysql
spec:
  replicas: 1
  selector:
    matchLabels: *MysqlDeploymentLabels
  template:
    metadata:
      labels: *MysqlDeploymentLabels
    spec:
      containers:
      - image: launcher.gcr.io/google/mysql5
        name: mysql
        env:
        - name: "MYSQL_ROOT_PASSWORD"
          value: "example-password"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: $APPLICATION_NAME-mysql-pvc
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: $APPLICATION_NAME-mysql-pvc
  labels:
    app: $APPLICATION_NAME
    component: wordpress-mysql
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: $APPLICATION_NAME-mysql-svc
  labels:
    app: $APPLICATION_NAME
    component: wordpress-mysql
spec:
  ports:
  - port: 3306
  selector:
    app: $APPLICATION_NAME
    component: wordpress-mysql
  clusterIP: None
---
# TODO(huyhuynh): Change this to using StatefulSet
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: $APPLICATION_NAME-wordpress
  labels: &WordpressDeploymentLabels
    app: $APPLICATION_NAME
    component: wordpress-webserver
spec:
  replicas: 1
  selector:
    matchLabels: *WordpressDeploymentLabels
  template:
    metadata:
      labels: *WordpressDeploymentLabels
    spec:
      containers:
      - image: launcher.gcr.io/google/wordpress4-php5-apache
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: $APPLICATION_NAME-mysql-svc
        # TODO(huyhuynh): Use secrets.
        - name: WORDPRESS_DB_PASSWORD
          value: example-password
        - name: WORDPRESS_DB_USER
          value: root
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: data
          mountPath: /var/www/html
          subPath: wp
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: $APPLICATION_NAME-wordpress-pvc
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: $APPLICATION_NAME-wordpress-pvc
  labels:
    app: $APPLICATION_NAME
    component: wordpress-webserver
spec:
  accessModes: [ReadWriteOnce]
  storageClassName: standard
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: $APPLICATION_NAME-wordpress-svc
  labels:
    app: $APPLICATION_NAME
    component: wordpress-webserver
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  selector:
    app: $APPLICATION_NAME
    component: wordpress-webserver
  type: LoadBalancer
